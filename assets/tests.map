{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.jshint.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.lint-test.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.lint-test.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.lint-test.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.lint-test.js","dummy/tests/resolver.jshint.lint-test.js","dummy/tests/router.jshint.lint-test.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.lint-test.js","dummy/tests/unit/initializers/route-alias-test.js","dummy/tests/unit/initializers/route-alias-test.jshint.lint-test.js","dummy/tests/unit/mixins/rel-link-to-test.js","dummy/tests/unit/mixins/rel-link-to-test.jshint.lint-test.js","dummy/tests/unit/mixins/route-alias-resolver-test.js","dummy/tests/unit/mixins/route-alias-resolver-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _dummyTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    // use defaults, but you can override\n    var attributes = _ember['default'].assign({}, _dummyConfigEnvironment['default'].APP, attrs);\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/initializers/route-alias-test', ['exports', 'ember', 'dummy/initializers/route-alias', 'qunit'], function (exports, _ember, _dummyInitializersRouteAlias, _qunit) {\n\n  var application, DSL;\n  var originals = {\n    route: _ember['default'].RouterDSL.prototype.route\n  };\n\n  (0, _qunit.module)('Unit | Initializer | route alias', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n        _dummyInitializersRouteAlias['default'].initialize(application);\n        DSL = new _ember['default'].RouterDSL(null, {});\n      });\n    }\n  });\n\n  (0, _qunit.test)('Initializer properly modifies/hooks all objects.', function (assert) {\n    var replacements = {\n      route: _ember['default'].RouterDSL.prototype.route\n    };\n\n    assert.ok(application._routeAliasLookup, 'Ensure that the dictionary we use is present.');\n    assert.notEqual(originals.route, replacements.route, 'RouterDSL#route has been replaced.');\n    assert.ok(_ember['default'].RouterDSL.prototype.route, 'RouterDSL#alias exists.');\n  });\n\n  (0, _qunit.test)('Route#setupController sets the contextRoute on the controller', function (assert) {\n    var route = _ember['default'].Route.create({ routeName: 'testy-mctesterton' });\n    var controller = _ember['default'].Controller.create({});\n\n    assert.notOk(controller.get('contextRoute'), 'contextRoute is empty to start');\n\n    route.setupController(controller);\n\n    assert.equal(controller.get('contextRoute'), 'testy-mctesterton', 'contextRoute is set after setup');\n  });\n\n  (0, _qunit.test)('RouterDSL assertions work.', function (assert) {\n    assert.throws(function () {\n      DSL.alias('asdf', '/asdf', 'target');\n    }, /You must create a route prior to creating an alias\\./, 'Throws an error when you create an alias prior to generating any routes.');\n\n    assert.throws(function () {\n      DSL.route('period.separated');\n    }, /You may not include a \"\\.\" in your route name\\./, 'Throws an error when you attempt to create a route with a period in it.');\n\n    DSL.route('index', { path: '/' });\n\n    assert.throws(function () {\n      DSL.alias('asdf', '/asdf', 'elsewhere');\n    }, /The alias target must exist before attempting to alias it\\./, 'Throws an error when you target an alias at a non-existent route.');\n  });\n\n  (0, _qunit.test)('RouterDSL#route saving of scope works as expected.', function (assert) {\n    var stub = function stub() {};\n\n    DSL.route('index', { path: '/' }, stub);\n    assert.ok(DSL.handlers.index, 'Sets up a lookup for the original arguments passed in for each route.');\n    assert.equal(stub, DSL.handlers.index[1], 'The saved callback is the original reference.');\n  });\n\n  (0, _qunit.test)('RouterDSL#alias creates the lookup.', function (assert) {\n    assert.notOk(DSL.intercepting, 'Not set as intercepting prior to an alias call.');\n\n    DSL.route('index', { path: '/' });\n\n    assert.equal(DSL.intercepting.length, 0, 'Not set as intercepting prior to an alias call.');\n\n    DSL.alias('asdf', '/asdf', 'index');\n\n    assert.equal(DSL.intercepting.length, 1, 'Sets up intercepting to identify state.');\n    assert.equal(application._routeAliasLookup['asdf'], 'index', 'Lookup entry is created for the alias route.');\n\n    DSL.route('one', function () {\n      this.route('a');\n      this.alias('alias-a', '/alias-a', 'a');\n    });\n    DSL.alias('alias-one', '/alias-one', 'one');\n\n    assert.equal(application._routeAliasLookup['alias-one'], 'one', 'Lookup entry is created for the alias route with nesting.');\n    assert.equal(application._routeAliasLookup['alias-one/index'], 'one/index', 'Lookup entry is created for the alias route with nesting.');\n    assert.equal(application._routeAliasLookup['alias-one/a'], 'one/a', 'Lookup entry is created for the alias route with nesting.');\n    assert.equal(application._routeAliasLookup['alias-one/alias-a'], 'alias-one/a', 'Lookup entry is created for the alias route with nesting.');\n    assert.equal(application._routeAliasLookup['one/alias-a'], 'one/a', 'Lookup entry is created for the alias route with nesting.');\n\n    DSL.alias('not-one', '/not-one', 'alias-one');\n\n    assert.equal(application._routeAliasLookup['not-one'], 'alias-one', 'Can alias an alias.');\n    assert.equal(application._routeAliasLookup['not-one/index'], 'alias-one/index', 'Can alias an alias.');\n    assert.equal(application._routeAliasLookup['not-one/a'], 'alias-one/a', 'Can alias an alias.');\n    assert.equal(application._routeAliasLookup['not-one/alias-a'], 'not-one/a', 'Can alias an alias.');\n  });\n});","define('dummy/tests/unit/initializers/route-alias-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/route-alias-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/route-alias-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/rel-link-to-test', ['exports', 'ember', 'dummy/mixins/rel-link-to', 'qunit'], function (exports, _ember, _dummyMixinsRelLinkTo, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | rel link to');\n\n  (0, _qunit.test)('Check _process lookups.', function (assert) {\n    var RelLinkToObject = _ember['default'].Object.extend(_dummyMixinsRelLinkTo['default']);\n    var subject = RelLinkToObject.create();\n\n    assert.equal(subject._process('foo.bar', ''), 'foo.bar', 'Empty string lookup.');\n    assert.equal(subject._process('foo.bar', './'), 'foo.bar', './ lookup.');\n    assert.equal(subject._process('foo.bar', '../'), 'foo', '../ lookup.');\n    assert.equal(subject._process('foo.bar', '../baz'), 'foo.baz', 'Sibling lookup.');\n    assert.equal(subject._process('foo', 'baz'), 'foo.baz', 'Child lookup.');\n  });\n});","define('dummy/tests/unit/mixins/rel-link-to-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/rel-link-to-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/rel-link-to-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/route-alias-resolver-test', ['exports', 'ember-resolver', 'dummy/mixins/route-alias-resolver', 'qunit'], function (exports, _emberResolver, _dummyMixinsRouteAliasResolver, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | route alias resolver');\n\n  (0, _qunit.test)('Adds a module name lookup pattern.', function (assert) {\n    var base = _emberResolver['default'].create();\n    var baseLength = base.get('moduleNameLookupPatterns').length;\n\n    var subject = _emberResolver['default'].extend(_dummyMixinsRouteAliasResolver['default']).create();\n    var subjectLength = subject.get('moduleNameLookupPatterns').length;\n\n    assert.equal(baseLength + 1, subjectLength, 'Successfully added a module name lookup pattern.');\n  });\n\n  (0, _qunit.test)('The module name lookup works.', function (assert) {\n    var result = undefined;\n    var subject = _emberResolver['default'].extend(_dummyMixinsRouteAliasResolver['default']).create();\n\n    assert.equal(subject.aliasedModuleName(), false, 'Returns falsy with no namespace.');\n\n    subject.namespace = {};\n\n    assert.equal(subject.aliasedModuleName(), false, 'Returns falsy with no lookup.');\n\n    subject.namespace._routeAliasLookup = {\n      'alias-one': 'one',\n      'alias-one/a': 'one/a',\n      'alias-one/alias-a': 'alias-one/a',\n      'not-one': 'alias-one'\n    };\n\n    result = subject.aliasedModuleName({\n      prefix: 'ember-route-alias',\n      type: 'something-else',\n      fullNameWithoutType: 'something-else'\n    });\n\n    assert.equal(result, false, 'Returns falsy when the lookup is for the wrong type.');\n\n    result = subject.aliasedModuleName({\n      prefix: 'ember-route-alias',\n      type: 'template',\n      fullNameWithoutType: 'something-else'\n    });\n\n    assert.equal(result, false, 'Returns falsy when not found in the lookup.');\n\n    result = subject.aliasedModuleName({\n      prefix: 'ember-route-alias',\n      type: 'template',\n      fullNameWithoutType: 'alias-one'\n    });\n\n    assert.equal(result, 'ember-route-alias/templates/one', 'Succeeds at simple lookups.');\n\n    result = subject.aliasedModuleName({\n      prefix: 'ember-route-alias',\n      type: 'template',\n      fullNameWithoutType: 'not-one'\n    });\n\n    assert.equal(result, 'ember-route-alias/templates/one', 'Succeeds at \"recursive\" lookups, alias to alias.');\n\n    result = subject.aliasedModuleName({\n      prefix: 'ember-route-alias',\n      type: 'template',\n      fullNameWithoutType: 'alias-one/alias-a'\n    });\n\n    assert.equal(result, 'ember-route-alias/templates/one/a', 'Succeeds at \"recursive\" lookups.');\n  });\n});\n// import Ember from 'ember';","define('dummy/tests/unit/mixins/route-alias-resolver-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/route-alias-resolver-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/route-alias-resolver-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}